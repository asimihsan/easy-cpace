name: Sanitizers

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed

jobs:
  sanitizers:
    # Only run if the CI workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Run all sanitizers on Linux with Clang
          - os: ubuntu-latest
            compiler: clang
            sanitizer: asan-ubsan
          - os: ubuntu-latest
            compiler: clang
            sanitizer: tsan
          - os: ubuntu-latest
            compiler: clang
            sanitizer: msan
          # Run just ASan+UBSan on macOS
          - os: macos-latest
            compiler: clang
            sanitizer: asan-ubsan
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Mise
        uses: jdx/mise-action@v2
        
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang-14 llvm-14
          
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja llvm
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
          
      - name: Set compiler (Linux/Clang)
        if: runner.os == 'Linux'
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          
      - name: Set compiler (macOS/Clang)
        if: runner.os == 'macOS'
        run: |
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
          
      - name: Run AddressSanitizer + UBSan
        if: matrix.sanitizer == 'asan-ubsan'
        run: just asan-ubsan
        env:
          ASAN_OPTIONS: detect_leaks=1:halt_on_error=1:color=always
          UBSAN_OPTIONS: halt_on_error=1:print_stacktrace=1:color=always
          
      - name: Run ThreadSanitizer
        if: matrix.sanitizer == 'tsan'
        run: just tsan
        env:
          TSAN_OPTIONS: halt_on_error=1:second_deadlock_stack=1:color=always
          
      - name: Run MemorySanitizer
        if: matrix.sanitizer == 'msan'
        run: just msan
        env:
          MSAN_OPTIONS: halt_on_error=1:color=always
      
      - name: Run Benchmark with Sanitizers
        if: matrix.sanitizer == 'asan-ubsan'
        run: just run-benchmark-asan-ubsan
        env:
          ASAN_OPTIONS: detect_leaks=1:halt_on_error=1:color=always
          UBSAN_OPTIONS: halt_on_error=1:print_stacktrace=1:color=always